#!/usr/bin/env bash

#
# Minimalistic SSH deployment.
# 
# Author: BigDot (Florin Iacob) devdots.com
# Original Author: Artem Sapegin, sapegin.me
# License: MIT
#
# Inspired by:
# https://github.com/visionmedia/deploy
# http://gleero.com/all/remote-ssh/
#


VERSION="0.0.5"
CONFIG=
TARGET=deploy
SSH_HOST=
SSH_PATH=
SSH_PORT=22
SSH_KEY=

# Common stuff
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
WHITE="$(tput setaf 7)"
CYAN="$(tput setaf 6)"
UNDERLINE="$(tput sgr 0 1)"
BOLD="$(tput bold)"
NOCOLOR="$(tput sgr0)"
function meta() { echo -e "$GREEN$1$NOCOLOR\n"; }
function header() { echo -e "$UNDERLINE$CYAN$1$NOCOLOR\n"; }
function error() { echo -e "$UNDERLINE$RED$1$NOCOLOR\n"; }

# Print usage information
usage() {
	version
	echo
	echo "Usage: `basename $0` shipfile.ship [command|option]"
	echo
	echo "Options:"
	echo
	echo "    -V, --version    Print program version"
	echo "    -h, --help       Print help (this screen)"
	echo
	echo "Commands:"
	echo
	echo "    <target>         Executes <target> target on remote host (run shipit to execute 'deploy' target)"
	echo "    list             Print list of available targets"
	echo "    console          Open an SSH session on remote host"
	echo "    exec <cmd>       Execute <cmd> on remote host"
	echo
}

# Print error message and exit
abort() {
	echo
	error "$@"
	exit 1
}

# Print version number
version() {
	echo
	echo "`basename $0` v$VERSION"
}



# Read and validate config file
read_config() {
  # Check if config file was supplied
  test -z $CONFIG && abort "You must specify a config file (eg: myconfig[.ship]). See $(basename $0) --help."
  
	# Check config file existance
	test -f $CONFIG || abort "Config file $CONFIG not found." 

	# Read and eval first section
	local config=`awk '/^/ {print; exit}' RS= $CONFIG`
	eval $config

	# Check required params
	test -z "$host" && incomplete_config 'host'
	test -z "$path" && incomplete_config 'path'
	test -z "$host" || test -z "$path" && exit 1
	
	# Use default port if not provided
	test -z "$port" && port=22
	
	# Expose params
	SSH_HOST=$host
	SSH_PATH=$path
	SSH_PORT=$port
  SSH_KEY=$key
}

# Print message about missing config param
incomplete_config() {
	error "Incomplete config: '$1' not defined."
}

# Deploy specified target
deploy() {
  meta "Using config file: $CONFIG"
	read_config

	# Check target existance
	target_exists $TARGET || abort "Target $TARGET not found in config file."
  
	# Read target script
	local script=`awk "/^\[$TARGET\]/ {print; exit}" RS= $CONFIG | sed 1d`
  local prehook=`awk "/^\[@$TARGET\]/ {print; exit}" RS= $CONFIG | sed 1d`
  
  # run local pre-hook if exists
	if target_has_prehook $TARGET ;then
    header "Running local pre-hook for $TARGET"
    run_local "$prehook"
    
    # Pre-hook ok ?
    if [ $? -eq 0 ]; then
      meta "Pre-hook ran successful"
    else
      abort "Pre-hook failed"
    fi
  fi
  
  # run target
  header "Shipping $TARGET on $SSH_HOST..."
  run "$script"

	# Shipped?
	if [ $? -eq 0 ]; then
		meta "Deploy successful"
	else
		abort "Deploy wasn’t successful."
	fi
}

# Check if config <section> exists
target_exists() {
	grep "^\[$1\]" $CONFIG &> /dev/null
}

# Check if config local <section> exists
target_has_prehook() {
	grep "^\[@$1\]" $CONFIG &> /dev/null
}

# Run script or command via SSH with cd to remote path
run() {
	# 1. Connect to remote host (-A enables forwarding of the authentication agent connection).
	# 2. Configure shell to exit on first erorr (set -e).
	# 3. Check destination directory.
	# 4. Open destination directory.
	# 5. Run script.
	local script="""
		set -e
		test -d \"$SSH_PATH\" || { echo \"${RED}Remote directory $SSH_PATH doesn’t exist.$NOCOLOR\"; exit 1; }
		cd \"$SSH_PATH\"
		$1
	"""
  
  local ssh_cmd="ssh"
  
  # add cusom key if provided
  test -z "$SSH_KEY" || ssh_cmd="$ssh_cmd -i $SSH_KEY"
  
	$ssh_cmd -t -A $2 "$SSH_HOST" -p "$SSH_PORT" "$script"
}

run_local() {
  local script="""
    $1
  """
  bash -c "$script"
}

# Print available targets
list_targets() {
	read_config
	header "Available ship targets:"
	awk '/^\[/ {print "• " $1}' $CONFIG | tr -d ']['
}

# Open remote terminal
open_console() {
	read_config
	header "Opening terminal on $SSH_HOST..."
	run "\$SHELL --login" "-t"
}

# Execute command via SSH
exec_command() {
	read_config
	header "Executing $@ on $SSH_HOST..."
	run $@
}

# Copy local file to remote host
copy_to_remote() {
	read_config
	test -f "$1" || test -d "$1" || abort "Local item $1 not found." 
  local ssh_cmd="scp"
  # add cusom key if provided
  test -z "$SSH_KEY" || ssh_cmd="$ssh_cmd -i $SSH_KEY"
  header "Copying $1 to $SSH_HOST:$SSH_PATH..."
	$ssh_cmd -r -P "$SSH_PORT" "$1" "$SSH_HOST:$SSH_PATH/$1"
}


########################################################################################################################

# Parse CLI arguments

# dispatch shorthand arguments
ARG=$1; shift
if [ -n "$ARG" ]; then
 case $ARG in
  -h|--help) usage; exit ;;
  -V|--version) version; exit ;;
 esac
fi

CONF="${ARG%.ship}.ship"
test "$CONF" != ".ship" && CONFIG="$CONF" && ARG=$1 && shift

if [ -n "$ARG" ]; then
 case $ARG in
  list|ls) list_targets; exit ;;
  console|shell|ssh) open_console; exit ;;
  exec|run) exec_command "$@"; exit ;;
  copy|cp) copy_to_remote "$@"; exit ;;
  *) TARGET="$ARG" ;;
 esac
fi

# Run specified target
deploy
